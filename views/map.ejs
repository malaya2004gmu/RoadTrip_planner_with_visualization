<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>City Map</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <link rel="stylesheet" href="/styles.css" />
  </head>
  <body>
    <h1>City Map</h1>
    <a href="/">⬅️ Back to Home</a>
    <svg width="800" height="600" style="border: 1px solid #ccc"></svg>

    <script>
      const graphData = {
        nodes: <%- JSON.stringify(locations.map(name => ({ id: name }))) %>,
        links: <%- JSON.stringify(routes.map(r => ({ source: r.from, target: r.to, distance: r.distance }))) %>
      };

      const svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

      const container = svg.append("g");

      // Zoom & pan behavior
      const zoom = d3.zoom()
        .scaleExtent([0.1, 4])
        .on("zoom", (event) => {
          container.attr("transform", event.transform);
        });

      svg.call(zoom);

      const simulation = d3.forceSimulation(graphData.nodes)
        .force("link", d3.forceLink(graphData.links)
          .id(d => d.id)
          .distance(d => Math.min(d.distance * 2, 200))
        )
        .force("charge", d3.forceManyBody().strength(-300))
        .force("center", d3.forceCenter(width / 2, height / 2));

      // Links (edges)
      const link = container.append("g")
        .attr("stroke", "#999")
        .attr("stroke-opacity", 0.6)
        .selectAll("line")
        .data(graphData.links)
        .enter().append("line")
        .attr("stroke-width", 2);

      // Nodes (circles)
      const node = container.append("g")
        .attr("stroke", "#fff")
        .attr("stroke-width", 1.5)
        .selectAll("circle")
        .data(graphData.nodes)
        .enter().append("circle")
        .attr("r", 15)
        .attr("fill", "#007bff")
        .call(drag(simulation));

      // Node labels
      const text = container.append("g")
        .selectAll("text")
        .data(graphData.nodes)
        .enter().append("text")
        .attr("text-anchor", "middle")
        .attr("dy", 4)
        .attr("font-size", 12)
        .attr("fill", "#fff")
        .text(d => d.id);

      // Edge labels (distances)
      const linkText = container.append("g")
        .selectAll("text")
        .data(graphData.links)
        .enter().append("text")
        .attr("font-size", 12)
        .attr("fill", "#555")
        .attr("text-anchor", "middle")
        .text(d => `${d.distance} km`);

      // Update positions each tick
      simulation.on("tick", () => {
        link
          .attr("x1", d => d.source.x)
          .attr("y1", d => d.source.y)
          .attr("x2", d => d.target.x)
          .attr("y2", d => d.target.y);

        node
          .attr("cx", d => d.x)
          .attr("cy", d => d.y);

        text
          .attr("x", d => d.x)
          .attr("y", d => d.y);

        linkText
          .attr("x", d => (d.source.x + d.target.x) / 2)
          .attr("y", d => (d.source.y + d.target.y) / 2);
      });

      // Auto-center & zoom after layout finishes
      simulation.on("end", () => {
        const bounds = container.node().getBBox();
        const fullWidth = width;
        const fullHeight = height;
        const midX = (bounds.x + bounds.width) / 2;
        const midY = (bounds.y + bounds.height) / 2;
        const scale = 0.85 / Math.max(bounds.width / fullWidth, bounds.height / fullHeight);
        const translate = [
          fullWidth / 2 - scale * midX,
          fullHeight / 2 - scale * midY
        ];

        svg.transition().duration(750)
          .call(zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));
      });

      // Drag behavior helper
      function drag(simulation) {
        return d3.drag()
          .on("start", (event, d) => {
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
          })
          .on("drag", (event, d) => {
            d.fx = event.x;
            d.fy = event.y;
          })
          .on("end", (event, d) => {
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
          });
      }
    </script>
  </body>
</html>
